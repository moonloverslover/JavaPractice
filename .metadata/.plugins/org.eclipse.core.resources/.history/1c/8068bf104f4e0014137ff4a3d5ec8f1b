//Given a binary tree, check whether it is a mirror of itself 
//(ie, symmetric around its center).
//
//For example, this binary tree is symmetric:
//
//    1
//   / \
//  2   2
// / \ / \
//3  4 4  3
//But the following is not:
//    1
//   / \
//  2   2
//   \   \
//   3    3
//Note:
//Bonus points if you could solve it both recursively and iteratively.

package com.boyi.leetcode;

public class SymmetricTree {

	public boolean isSym(TreeNode n) {
		
		if(n == null) {
			return true;
		}
		
		TreeNode m = n;
		flip(m);
		
		return isSameTree_DFS(n,m);
		
	}
	
	public void flip(TreeNode m) {
		
		TreeNode temp = m.left;
		m.left = m.right;
		m.right = temp;
		
		if(m.left != null) {
			flip(m.left);
		}
		
		if (m.right != null) {
			flip(m.right);
		}
		
	}
	
	
	public boolean isSameTree_DFS(TreeNode n, TreeNode m) {
		
		if (n == null && m == null) {
			return true;
		}
		
		if ( n == null && m !=null) {
			return false;
		}
		
		if ( n != null && m ==null) {
			return false;
		}
		
		if (n != null && m != null) {
			if (n.val != m.val) {
				return false;
			}
		}
		
		
		return isSameTree_DFS(n.left,m.left)&&isSameTree_DFS(n.right,m.right);
		
	}
	
	public static void main(String[] args) {
		TreeNode n1 = new TreeNode(1);
		TreeNode n2 = new TreeNode(2);
		TreeNode n3 = new TreeNode(3);
		TreeNode n4 = new TreeNode(4);
		TreeNode n5 = new TreeNode(5);
		TreeNode n6 = new TreeNode(6);
		TreeNode n7 = new TreeNode(7);
	
		n1.left = n2;
		n1.right = n3;
		n2.left = n4;
		n2.right = n5;
		n3.left = n6;
		n3.right = n7;
		
		SymmetricTree st = new SymmetricTree();
		System.out.println(st.isSym(n1));
	}

}
